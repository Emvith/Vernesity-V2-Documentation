{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vernesity V2 UI Library","text":""},{"location":"#made-by-emmy-discord-emvith","title":"Made by Emmy (Discord: emvith)","text":""},{"location":"#last-update-5th-august-2025","title":"Last update (5th August 2025):","text":"<ul> <li>Made CommandBars resizable</li> <li>Fixed a small bug with minimizing</li> <li>Added \"Reset\" buttons to ColorPickers</li> <li>Made small changes to some functions</li> </ul>"},{"location":"#features","title":"Features:","text":"<ul> <li>Resizable windows</li> <li>Minimizable</li> <li>Many elements</li> <li>Key system</li> <li>Search function</li> <li>All elements are editable (except for Notifications)</li> <li>Ability to change themes</li> <li>Easy to use</li> <li>Much, much more</li> </ul>"},{"location":"#getting-loadstring","title":"Getting Loadstring","text":"<pre><code>local Library = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Emvith/Vernesity-V2/main/source.lua\"))()\n</code></pre>"},{"location":"#adding-key-system","title":"Adding Key System","text":"<pre><code>Library:EnableKeySystem(&lt;Title (string)&gt;, &lt;Subtitle (string)&gt;, &lt;Note (string)&gt;, &lt;List of keys (table)&gt;)\n</code></pre>"},{"location":"#creating-a-window","title":"Creating a Window","text":"<pre><code>local Window = Library:Window(&lt;Title (string)&gt;, &lt;Subtitle (string)&gt;, &lt;Theme (string/table)&gt;)\n</code></pre>"},{"location":"#themes","title":"Themes:","text":"<p>DarkTheme GrayTheme LightTheme BlueTheme PurpleTheme RedTheme   </p>"},{"location":"#creating-notifications","title":"Creating Notifications","text":"<pre><code>Window:Notify(&lt;Title (string)&gt;, &lt;Description (string)&gt;, &lt;Arguments (table)&gt;, &lt;Duration (number)&gt;, &lt;Callback (function)&gt;)\n</code></pre>"},{"location":"#the-values-in-the-table-should-be-0-2-strings-or-0-2-numbers-if-you-want-to-use-images-instead-of-regular-buttons","title":"The values in the table should be 0-2 strings or 0-2 numbers (if you want to use images instead of regular buttons)","text":"<p>Notifications with 2 image buttons will always return 'Button1' when the first button is pressed, and 'Button2' when the second button is pressed</p>"},{"location":"#for-example-this-would-create-a-notification-with-2-buttons","title":"For example, this would create a notification with 2 Buttons","text":"<pre><code>Window:Notify(\"Question\", \"Do you like this UI Library?\", {\"Yes\", \"No\"}, 5, function(Text)\n    if Text == \"Yes\" then\n        print(\"Thank you!\")\n    else\n        print(\"Please tell me what I could improve!\")\n    end\nend)\n</code></pre>"},{"location":"#and-this-would-create-a-notification-with-1-imagebutton-you-need-to-enter-a-valid-imageid","title":"And this would create a notification with 1 ImageButton (you need to enter a valid ImageID)","text":"<pre><code>Window:Notify(\"Notification\", \"Description\", {1234567}, 10, function()\n    print(\"Button pressed\")\nend)\n</code></pre>"},{"location":"#this-would-just-create-a-notification-with-no-buttons","title":"This would just create a notification with no buttons","text":"<pre><code>Window:Notify(\"Notification\", \"Description\", {}, 3)\n</code></pre>"},{"location":"#creating-tabs","title":"Creating Tabs","text":"<pre><code>local Tab = Window:Tab(&lt;Tab Name (string)&gt;, &lt;ImageID (optional) (number)&gt;)\n</code></pre>"},{"location":"#creating-sections","title":"Creating Sections","text":"<pre><code>local Section = Tab:Section(&lt;Section Name (string)&gt;)\n</code></pre>"},{"location":"#creating-buttons","title":"Creating Buttons","text":"<pre><code>local Button = Section:Button(&lt;Button Name (string)&gt;, &lt;Button Description (string)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#activating-a-button","title":"Activating a Button","text":"<pre><code>Button:Activate()\n</code></pre>"},{"location":"#creating-labels","title":"Creating Labels","text":"<pre><code>local Label = Section:Label(&lt;Label Name (string)&gt;)\n</code></pre>"},{"location":"#creating-textboxes","title":"Creating TextBoxes","text":"<pre><code>local TextBox = Section:TextBox(&lt;TextBox Name (string)&gt;, &lt;TextBox Description (string)&gt;, &lt;Default Text (string)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#getting-a-textboxs-current-text","title":"Getting a TextBox's current text","text":"<pre><code>print(TextBox:GetText())\n</code></pre>"},{"location":"#changing-a-textboxs-text","title":"Changing a TextBox's text","text":"<pre><code>TextBox:SetText(&lt;Text (string)&gt;)\n</code></pre>"},{"location":"#creating-paragraphs","title":"Creating Paragraphs","text":"<pre><code>local Paragraph = Section:Paragraph(&lt;Text 1 (string)&gt;, &lt;Text 2 (string)&gt;)\n</code></pre>"},{"location":"#creating-interactables","title":"Creating Interactables","text":"<pre><code>local Interactable = Section:Interactable(&lt;Interactable Name (string)&gt;, &lt;Interactable Description (string)&gt;, &lt;Button Text (string)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#activating-an-interactable","title":"Activating an Interactable","text":"<pre><code>Interactable:Activate()\n</code></pre>"},{"location":"#creating-dropdowns","title":"Creating Dropdowns","text":"<pre><code>local Dropdown = Section:Dropdown(&lt;Dropdown Name (string)&gt;, &lt;Dropdown List (table)&gt;, &lt;Default Option (string)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#adding-a-button-inside-of-a-dropdown","title":"Adding a button inside of a Dropdown","text":"<pre><code>local DropdownButton = Dropdown:Button(&lt;Button Name (string)&gt;)\n</code></pre>"},{"location":"#selecting-an-option-in-a-dropdown","title":"Selecting an option in a Dropdown","text":"<pre><code>Dropdown:Select(&lt;Option&gt;)\n</code></pre>"},{"location":"#creating-switches","title":"Creating Switches","text":"<pre><code>local Switch = Section:Switch(&lt;Switch Name (string)&gt;, &lt;Switch Description (string)&gt;, &lt;Enabled (true/false)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#checking-if-a-switch-is-toggled-returns-true-if-its-turned-on","title":"Checking if a switch is toggled (returns true if it's turned on)","text":"<pre><code>print(tostring(Switch:IsToggled()))\n</code></pre>"},{"location":"#turning-a-switch-on","title":"Turning a switch on","text":"<pre><code>Switch:On()\n</code></pre>"},{"location":"#turning-a-switch-off","title":"Turning a switch off","text":"<pre><code>Switch:Off()\n</code></pre>"},{"location":"#toggling-a-switch","title":"Toggling a switch","text":"<pre><code>Switch:Toggle()\n</code></pre>"},{"location":"#creating-toggles","title":"Creating Toggles","text":"<pre><code>local Toggle = Section:Toggle(&lt;Toggle Name (string)&gt;, &lt;Toggle Description (string)&gt;, &lt;Enabled (true/false)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#checking-if-a-toggled-is-toggled-returns-true-if-its-turned-on","title":"Checking if a toggled is toggled (returns true if it's turned on)","text":"<pre><code>print(tostring(Toggle:IsToggled()))\n</code></pre>"},{"location":"#turning-a-toggle-on","title":"Turning a toggle on","text":"<pre><code>Toggle:On()\n</code></pre>"},{"location":"#turning-a-toggle-off","title":"Turning a toggle off","text":"<pre><code>Toggle:Off()\n</code></pre>"},{"location":"#toggling-a-toggle","title":"Toggling a toggle","text":"<pre><code>Toggle:Toggle()\n</code></pre>"},{"location":"#creating-sliders","title":"Creating Sliders","text":"<pre><code>local Slider = Section:Slider(&lt;Slider Name (string)&gt;, &lt;Slider Description (string)&gt;, &lt;Minimum Value (number)&gt;, &lt;Maximum Value (number)&gt;, &lt;Default Value (number)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#getting-a-sliders-current-value","title":"Getting a slider's current value","text":"<pre><code>print(Slider:GetValue())\n</code></pre>"},{"location":"#changing-a-sliders-value","title":"Changing a slider's value","text":"<pre><code>Slider:SetValue(&lt;number&gt;)\n</code></pre>"},{"location":"#creating-colorpickers","title":"Creating ColorPickers","text":"<pre><code>local ColorPicker = Section:ColorPicker(&lt;ColorPicker Name (string)&gt;, &lt;ColorPicker Description (string)&gt;, &lt;Default Color (Color3)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#changing-a-colorpickers-color","title":"Changing a ColorPicker's Color","text":"<pre><code>ColorPicker:SetColor(&lt;Color3&gt;)\n</code></pre>"},{"location":"#creating-playerlists","title":"Creating PlayerLists","text":"<pre><code>local PlayerList = Section:PlayerList(&lt;PlayerList Name (string)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#selecting-a-player-in-a-playerlist","title":"Selecting a player in a PlayerList","text":"<pre><code>PlayerList:Select(&lt;Player&gt;)\n</code></pre>"},{"location":"#creating-keybinds","title":"Creating Keybinds","text":"<pre><code>local Keybind = Section:Keybind(&lt;Keybind Name (string)&gt;, &lt;Keybind Description (string)&gt;, &lt;Default Keybind (string)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#changing-the-keybind","title":"Changing the keybind","text":"<pre><code>Keybind:SetKeybind(&lt;New Keybind (string)&gt;)\n</code></pre>"},{"location":"#adding-commandbar","title":"Adding CommandBar","text":"<pre><code>local CommandBar = Window:CommandBar(&lt;CommandBar Name (string)&gt;, &lt;Default Prefix (string)&gt;)\n</code></pre>"},{"location":"#getting-all-commands","title":"Getting all commands","text":"<pre><code>local Commands = CommandBar:GetCommands()\n</code></pre>"},{"location":"#getting-the-current-prefix","title":"Getting the current prefix","text":"<pre><code>local Prefix = CommandBar:GetPrefix()\n</code></pre>"},{"location":"#changing-the-prefix","title":"Changing the prefix","text":"<pre><code>CommandBar:ChangePrefix(\"-\")\n</code></pre>"},{"location":"#adding-commands","title":"Adding commands","text":"<pre><code>local Command1 = CommandBar:AddCommand(&lt;Names (table)&gt;, &lt;Arguments (table)&gt;, &lt;Description (string)&gt;, &lt;Function (function)&gt;)\n</code></pre>"},{"location":"#other-functions","title":"Other Functions","text":""},{"location":"#getting-the-windows-current-theme","title":"Getting the Window's current theme","text":"<pre><code>local theme = Window:GetTheme()\n</code></pre>"},{"location":"#minimizingmaximizing-a-windowcommandbar","title":"Minimizing/Maximizing a Window/CommandBar","text":"<pre><code>Window:Minimize()\nWindow:Maximize()\nCommandBar:Minimize()\nCommandBar:Maximize()\n</code></pre>"},{"location":"#adding-themes","title":"Adding themes","text":""},{"location":"#there-are-2-ways-to-add-themes","title":"There are 2 ways to add themes:","text":"<pre><code>local Window = Library:Window(\"Title\", \"Subtitle\", {\n    TextColor = Color3.fromRGB(240, 240, 240),\n    WindowColor = Color3.fromRGB(48, 75, 45),\n    TabColor = Color3.fromRGB(56, 88, 53),\n    ElementColor = Color3.fromRGB(69, 107, 65),\n    SecondaryElementColor = Color3.fromRGB(96, 175, 87)\n})\n</code></pre>"},{"location":"#or","title":"or","text":"<pre><code>Library:AddTheme(\"GreenTheme\", {\n    TextColor = Color3.fromRGB(240, 240, 240),\n    WindowColor = Color3.fromRGB(48, 75, 45),\n    TabColor = Color3.fromRGB(56, 88, 53),\n    ElementColor = Color3.fromRGB(69, 107, 65),\n    SecondaryElementColor = Color3.fromRGB(96, 175, 87)\n})\nlocal Window = Library:Window(\"Title\", \"Subtitle\", \"GreenTheme\")\n</code></pre>"},{"location":"#if-you-want-to-change-the-theme-there-are-also-2-ways-to-do-it","title":"If you want to change the theme, there are also 2 ways to do it:","text":"<pre><code>Window:ChangeTheme(&lt;Theme (string/table)&gt;)\n</code></pre>"},{"location":"#or_1","title":"or","text":"<pre><code>Window:Edit(\"Title\", \"Subtitle\", &lt;Theme (string/table)&gt;)\n</code></pre>"},{"location":"#toggling-the-windowcommandbar-ui","title":"Toggling the Window/CommandBar UI:","text":"<pre><code>Window:ToggleUI()\nCommandBar:ToggleUI()\n</code></pre>"},{"location":"#editing-ui-elements-you-can-edit-any-ui-element-except-for-notifications","title":"Editing UI Elements: (you can edit any UI element except for notifications)","text":"<pre><code>&lt;Element&gt;:Edit(&lt;New Arguments&gt;)\n</code></pre>"},{"location":"#example","title":"Example:","text":"<pre><code>local Window = Library:Window(\"Title\", \"Subtitle\", \"DarkTheme\")\nWindow:Edit(\"New Title\", \"New Subtitle\", \"PurpleTheme\")\n</code></pre>"},{"location":"#removing-ui-elements","title":"Removing UI Elements:","text":"<pre><code>&lt;Element&gt;:Remove()\n</code></pre>"},{"location":"#example_1","title":"Example:","text":"<pre><code>local Window = Library:Window(\"Title\", \"Subtitle\", \"DarkTheme\")\nWindow:Remove()\n</code></pre>"},{"location":"#and-heres-the-code-which-will-help-you-add-a-fully-customizable-ui","title":"And here's the code which will help you add a fully customizable UI","text":"<pre><code>theme = Window:GetTheme()\nfor i, v in pairs(theme) do\n    ThemeColorPicker = SettingsSection:ColorPicker(i, \"Changes \"..i..\"'s Theme\", v, function(color3)\n        theme = Window:GetTheme()\n        theme[i] = color3\n        Window:ChangeTheme(theme)\n    end)\nend\n</code></pre>"},{"location":"#more-useless-functions-onclose-onminimize-onthemechanged-getelement-and-converttocommand","title":"More Useless Functions: :OnClose(), :OnMinimize(), :OnThemeChanged(), :GetElement() and :ConvertToCommand() <pre><code>Window:OnClose(function()\n    print('Window closed')\nend)\nWindow:OnMinimize(function(state)\n    print('Window minimized:', state)\nend)\nCommandBar:OnClose(function()\n    print('CommandBar closed')\nend)\nCommandBar:OnMinimize(function(state)\n    print('CommandBar minimized:', state)\nend)\nWindow:OnThemeChanged(function()\n    print(\"The theme was changed\")\nend)\nprint(Window:GetElement().Name)\n</code></pre> <p><pre><code>Button:ConvertToCommand(CommandBar)\n</code></pre> (Not available for Labels or Paragraphs for obvious reasons)</p>","text":""},{"location":"#example-code","title":"Example Code:","text":"<pre><code>local Library = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Emvith/Vernesity-V2/main/source.lua\"))()\nLibrary:EnableKeySystem('Title', 'Key System', 'Note here', {'1234'})\nlocal Window = Library:Window('Vernesity', 'Game Name', 'DarkTheme')\nlocal Tab = Window:Tab('Tab 1')\nlocal Tab2 = Window:Tab('Tab 2')\nlocal Section = Tab:Section('Main')\nlocal Button = Section:Button('Button', 'Desc', function()\n    print('Clicked')\nend)\nlocal Label = Section:Label('Label')\nlocal Paragraph = Section:Paragraph('Text 1', 'Text 2')\nlocal TextBox = Section:TextBox('TextBox', 'Desc', 'Type here...', function(text)\n    print('You typed:', text)\nend)\nlocal Interactable = Section:Interactable('Interactable', 'Desc', 'Click Me!', function()\n    print('Clicked!')\nend)\nlocal Dropdown = Section:Dropdown('Dropdown', {'Option 1', 'Option 2'}, 'Select...', function(selectedOption)\n    print(selectedOption)\nend)\nlocal Switch = Section:Switch('Switch', 'Desc', true, function(state)\n    if state then\n        print('On')\n    else\n        print('Off')\n    end\nend)\nlocal Toggle = Section:Toggle('Toggle', 'Desc', true, function(state)\n    if state then\n        print('On')\n    else\n        print('Off')\n    end\nend)\nlocal Slider = Section:Slider('WalkSpeed Slider', 'Desc', 0, 100, 16, function(speed)\n    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed\nend)\nlocal Keybind = Section:Keybind('Keybind - Toggle UI', 'Desc', 'F', function()\n    Window:ToggleUI()\nend)\n\nWindow:Notify('Question', 'Do you like this UI Library?', {'Yes', 'No'}, 5, function(Text)\n    if Text == 'Yes' then\n        print('Thank you!')\n    else\n        print('Please tell me what I could improve!')\n    end\nend)\n\nlocal SettingsSection = Tab2:Section('Settings')\n\ntheme = Window:GetTheme()\nfor i, v in pairs(theme) do\n    ThemeColorPicker = SettingsSection:ColorPicker(i, \"Changes \"..i..\"'s Theme\", v, function(color3)\n        theme = Window:GetTheme()\n        theme[i] = color3\n        Window:ChangeTheme(theme)\n    end)\nend\n\nWindow:OnClose(function()\n    print('Closed')\nend)\nWindow:OnMinimize(function(state)\n    print('Minimized:', state)\nend)\nWindow:OnThemeChanged(function()\n    print(\"The theme was changed\")\nend)\nlocal PlayerList = Section:PlayerList('PlayerList', function(plr)\n    print(\"Selected player:\", plr)\nend)\n\nlocal CommandBarUI = Window:CommandBar('Name here', '-')\nCommandBarUI:AddCommand({'print'}, {'string'}, 'Prints a string', function(str)\n    print(str)\nend)\nCommandBarUI:AddCommand({'addnumbers'}, {'numbers'}, 'Adds numbers together', function(numbers)\n    local totalSum = 0\n    for number in numbers:gmatch(\"%d+\") do\n        totalSum = totalSum + tonumber(number)\n    end\n    print(totalSum)\nend)\n</code></pre>"}]}